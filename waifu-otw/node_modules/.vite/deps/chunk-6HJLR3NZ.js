import {
  DEG_TO_RAD,
  RAD_TO_DEG,
  Rectangle,
  Transform,
  import_eventemitter3,
  removeItems
} from "./chunk-XG7H2P3S.js";
import {
  MASK_TYPES,
  settings
} from "./chunk-IMFIE4AF.js";

// node_modules/@pixi/display/dist/esm/display.mjs
settings.SORTABLE_CHILDREN = false;
var Bounds = function() {
  function Bounds2() {
    this.minX = Infinity;
    this.minY = Infinity;
    this.maxX = -Infinity;
    this.maxY = -Infinity;
    this.rect = null;
    this.updateID = -1;
  }
  Bounds2.prototype.isEmpty = function() {
    return this.minX > this.maxX || this.minY > this.maxY;
  };
  Bounds2.prototype.clear = function() {
    this.minX = Infinity;
    this.minY = Infinity;
    this.maxX = -Infinity;
    this.maxY = -Infinity;
  };
  Bounds2.prototype.getRectangle = function(rect) {
    if (this.minX > this.maxX || this.minY > this.maxY) {
      return Rectangle.EMPTY;
    }
    rect = rect || new Rectangle(0, 0, 1, 1);
    rect.x = this.minX;
    rect.y = this.minY;
    rect.width = this.maxX - this.minX;
    rect.height = this.maxY - this.minY;
    return rect;
  };
  Bounds2.prototype.addPoint = function(point) {
    this.minX = Math.min(this.minX, point.x);
    this.maxX = Math.max(this.maxX, point.x);
    this.minY = Math.min(this.minY, point.y);
    this.maxY = Math.max(this.maxY, point.y);
  };
  Bounds2.prototype.addPointMatrix = function(matrix, point) {
    var a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;
    var x = a * point.x + c * point.y + tx;
    var y = b * point.x + d * point.y + ty;
    this.minX = Math.min(this.minX, x);
    this.maxX = Math.max(this.maxX, x);
    this.minY = Math.min(this.minY, y);
    this.maxY = Math.max(this.maxY, y);
  };
  Bounds2.prototype.addQuad = function(vertices) {
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;
    var x = vertices[0];
    var y = vertices[1];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    x = vertices[2];
    y = vertices[3];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    x = vertices[4];
    y = vertices[5];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    x = vertices[6];
    y = vertices[7];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  };
  Bounds2.prototype.addFrame = function(transform, x0, y0, x1, y1) {
    this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);
  };
  Bounds2.prototype.addFrameMatrix = function(matrix, x0, y0, x1, y1) {
    var a = matrix.a;
    var b = matrix.b;
    var c = matrix.c;
    var d = matrix.d;
    var tx = matrix.tx;
    var ty = matrix.ty;
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;
    var x = a * x0 + c * y0 + tx;
    var y = b * x0 + d * y0 + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    x = a * x1 + c * y0 + tx;
    y = b * x1 + d * y0 + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    x = a * x0 + c * y1 + tx;
    y = b * x0 + d * y1 + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    x = a * x1 + c * y1 + tx;
    y = b * x1 + d * y1 + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  };
  Bounds2.prototype.addVertexData = function(vertexData, beginOffset, endOffset) {
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;
    for (var i = beginOffset; i < endOffset; i += 2) {
      var x = vertexData[i];
      var y = vertexData[i + 1];
      minX = x < minX ? x : minX;
      minY = y < minY ? y : minY;
      maxX = x > maxX ? x : maxX;
      maxY = y > maxY ? y : maxY;
    }
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  };
  Bounds2.prototype.addVertices = function(transform, vertices, beginOffset, endOffset) {
    this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);
  };
  Bounds2.prototype.addVerticesMatrix = function(matrix, vertices, beginOffset, endOffset, padX, padY) {
    if (padX === void 0) {
      padX = 0;
    }
    if (padY === void 0) {
      padY = padX;
    }
    var a = matrix.a;
    var b = matrix.b;
    var c = matrix.c;
    var d = matrix.d;
    var tx = matrix.tx;
    var ty = matrix.ty;
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;
    for (var i = beginOffset; i < endOffset; i += 2) {
      var rawX = vertices[i];
      var rawY = vertices[i + 1];
      var x = a * rawX + c * rawY + tx;
      var y = d * rawY + b * rawX + ty;
      minX = Math.min(minX, x - padX);
      maxX = Math.max(maxX, x + padX);
      minY = Math.min(minY, y - padY);
      maxY = Math.max(maxY, y + padY);
    }
    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  };
  Bounds2.prototype.addBounds = function(bounds) {
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;
    this.minX = bounds.minX < minX ? bounds.minX : minX;
    this.minY = bounds.minY < minY ? bounds.minY : minY;
    this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;
    this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;
  };
  Bounds2.prototype.addBoundsMask = function(bounds, mask) {
    var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;
    var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;
    var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;
    var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;
    if (_minX <= _maxX && _minY <= _maxY) {
      var minX = this.minX;
      var minY = this.minY;
      var maxX = this.maxX;
      var maxY = this.maxY;
      this.minX = _minX < minX ? _minX : minX;
      this.minY = _minY < minY ? _minY : minY;
      this.maxX = _maxX > maxX ? _maxX : maxX;
      this.maxY = _maxY > maxY ? _maxY : maxY;
    }
  };
  Bounds2.prototype.addBoundsMatrix = function(bounds, matrix) {
    this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);
  };
  Bounds2.prototype.addBoundsArea = function(bounds, area) {
    var _minX = bounds.minX > area.x ? bounds.minX : area.x;
    var _minY = bounds.minY > area.y ? bounds.minY : area.y;
    var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;
    var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;
    if (_minX <= _maxX && _minY <= _maxY) {
      var minX = this.minX;
      var minY = this.minY;
      var maxX = this.maxX;
      var maxY = this.maxY;
      this.minX = _minX < minX ? _minX : minX;
      this.minY = _minY < minY ? _minY : minY;
      this.maxX = _maxX > maxX ? _maxX : maxX;
      this.maxY = _maxY > maxY ? _maxY : maxY;
    }
  };
  Bounds2.prototype.pad = function(paddingX, paddingY) {
    if (paddingX === void 0) {
      paddingX = 0;
    }
    if (paddingY === void 0) {
      paddingY = paddingX;
    }
    if (!this.isEmpty()) {
      this.minX -= paddingX;
      this.maxX += paddingX;
      this.minY -= paddingY;
      this.maxY += paddingY;
    }
  };
  Bounds2.prototype.addFramePad = function(x0, y0, x1, y1, padX, padY) {
    x0 -= padX;
    y0 -= padY;
    x1 += padX;
    y1 += padY;
    this.minX = this.minX < x0 ? this.minX : x0;
    this.maxX = this.maxX > x1 ? this.maxX : x1;
    this.minY = this.minY < y0 ? this.minY : y0;
    this.maxY = this.maxY > y1 ? this.maxY : y1;
  };
  return Bounds2;
}();
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) {
      if (b2.hasOwnProperty(p)) {
        d2[p] = b2[p];
      }
    }
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var DisplayObject = function(_super) {
  __extends(DisplayObject2, _super);
  function DisplayObject2() {
    var _this = _super.call(this) || this;
    _this.tempDisplayObjectParent = null;
    _this.transform = new Transform();
    _this.alpha = 1;
    _this.visible = true;
    _this.renderable = true;
    _this.cullable = false;
    _this.cullArea = null;
    _this.parent = null;
    _this.worldAlpha = 1;
    _this._lastSortedIndex = 0;
    _this._zIndex = 0;
    _this.filterArea = null;
    _this.filters = null;
    _this._enabledFilters = null;
    _this._bounds = new Bounds();
    _this._localBounds = null;
    _this._boundsID = 0;
    _this._boundsRect = null;
    _this._localBoundsRect = null;
    _this._mask = null;
    _this._maskRefCount = 0;
    _this._destroyed = false;
    _this.isSprite = false;
    _this.isMask = false;
    return _this;
  }
  DisplayObject2.mixin = function(source) {
    var keys = Object.keys(source);
    for (var i = 0; i < keys.length; ++i) {
      var propertyName = keys[i];
      Object.defineProperty(DisplayObject2.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));
    }
  };
  Object.defineProperty(DisplayObject2.prototype, "destroyed", {
    get: function() {
      return this._destroyed;
    },
    enumerable: false,
    configurable: true
  });
  DisplayObject2.prototype._recursivePostUpdateTransform = function() {
    if (this.parent) {
      this.parent._recursivePostUpdateTransform();
      this.transform.updateTransform(this.parent.transform);
    } else {
      this.transform.updateTransform(this._tempDisplayObjectParent.transform);
    }
  };
  DisplayObject2.prototype.updateTransform = function() {
    this._boundsID++;
    this.transform.updateTransform(this.parent.transform);
    this.worldAlpha = this.alpha * this.parent.worldAlpha;
  };
  DisplayObject2.prototype.getBounds = function(skipUpdate, rect) {
    if (!skipUpdate) {
      if (!this.parent) {
        this.parent = this._tempDisplayObjectParent;
        this.updateTransform();
        this.parent = null;
      } else {
        this._recursivePostUpdateTransform();
        this.updateTransform();
      }
    }
    if (this._bounds.updateID !== this._boundsID) {
      this.calculateBounds();
      this._bounds.updateID = this._boundsID;
    }
    if (!rect) {
      if (!this._boundsRect) {
        this._boundsRect = new Rectangle();
      }
      rect = this._boundsRect;
    }
    return this._bounds.getRectangle(rect);
  };
  DisplayObject2.prototype.getLocalBounds = function(rect) {
    if (!rect) {
      if (!this._localBoundsRect) {
        this._localBoundsRect = new Rectangle();
      }
      rect = this._localBoundsRect;
    }
    if (!this._localBounds) {
      this._localBounds = new Bounds();
    }
    var transformRef = this.transform;
    var parentRef = this.parent;
    this.parent = null;
    this.transform = this._tempDisplayObjectParent.transform;
    var worldBounds = this._bounds;
    var worldBoundsID = this._boundsID;
    this._bounds = this._localBounds;
    var bounds = this.getBounds(false, rect);
    this.parent = parentRef;
    this.transform = transformRef;
    this._bounds = worldBounds;
    this._bounds.updateID += this._boundsID - worldBoundsID;
    return bounds;
  };
  DisplayObject2.prototype.toGlobal = function(position, point, skipUpdate) {
    if (skipUpdate === void 0) {
      skipUpdate = false;
    }
    if (!skipUpdate) {
      this._recursivePostUpdateTransform();
      if (!this.parent) {
        this.parent = this._tempDisplayObjectParent;
        this.displayObjectUpdateTransform();
        this.parent = null;
      } else {
        this.displayObjectUpdateTransform();
      }
    }
    return this.worldTransform.apply(position, point);
  };
  DisplayObject2.prototype.toLocal = function(position, from, point, skipUpdate) {
    if (from) {
      position = from.toGlobal(position, point, skipUpdate);
    }
    if (!skipUpdate) {
      this._recursivePostUpdateTransform();
      if (!this.parent) {
        this.parent = this._tempDisplayObjectParent;
        this.displayObjectUpdateTransform();
        this.parent = null;
      } else {
        this.displayObjectUpdateTransform();
      }
    }
    return this.worldTransform.applyInverse(position, point);
  };
  DisplayObject2.prototype.setParent = function(container) {
    if (!container || !container.addChild) {
      throw new Error("setParent: Argument must be a Container");
    }
    container.addChild(this);
    return container;
  };
  DisplayObject2.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) {
    if (x === void 0) {
      x = 0;
    }
    if (y === void 0) {
      y = 0;
    }
    if (scaleX === void 0) {
      scaleX = 1;
    }
    if (scaleY === void 0) {
      scaleY = 1;
    }
    if (rotation === void 0) {
      rotation = 0;
    }
    if (skewX === void 0) {
      skewX = 0;
    }
    if (skewY === void 0) {
      skewY = 0;
    }
    if (pivotX === void 0) {
      pivotX = 0;
    }
    if (pivotY === void 0) {
      pivotY = 0;
    }
    this.position.x = x;
    this.position.y = y;
    this.scale.x = !scaleX ? 1 : scaleX;
    this.scale.y = !scaleY ? 1 : scaleY;
    this.rotation = rotation;
    this.skew.x = skewX;
    this.skew.y = skewY;
    this.pivot.x = pivotX;
    this.pivot.y = pivotY;
    return this;
  };
  DisplayObject2.prototype.destroy = function(_options) {
    if (this.parent) {
      this.parent.removeChild(this);
    }
    this._destroyed = true;
    this.transform = null;
    this.parent = null;
    this._bounds = null;
    this.mask = null;
    this.cullArea = null;
    this.filters = null;
    this.filterArea = null;
    this.hitArea = null;
    this.interactive = false;
    this.interactiveChildren = false;
    this.emit("destroyed");
    this.removeAllListeners();
  };
  Object.defineProperty(DisplayObject2.prototype, "_tempDisplayObjectParent", {
    get: function() {
      if (this.tempDisplayObjectParent === null) {
        this.tempDisplayObjectParent = new TemporaryDisplayObject();
      }
      return this.tempDisplayObjectParent;
    },
    enumerable: false,
    configurable: true
  });
  DisplayObject2.prototype.enableTempParent = function() {
    var myParent = this.parent;
    this.parent = this._tempDisplayObjectParent;
    return myParent;
  };
  DisplayObject2.prototype.disableTempParent = function(cacheParent) {
    this.parent = cacheParent;
  };
  Object.defineProperty(DisplayObject2.prototype, "x", {
    get: function() {
      return this.position.x;
    },
    set: function(value) {
      this.transform.position.x = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "y", {
    get: function() {
      return this.position.y;
    },
    set: function(value) {
      this.transform.position.y = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "worldTransform", {
    get: function() {
      return this.transform.worldTransform;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "localTransform", {
    get: function() {
      return this.transform.localTransform;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "position", {
    get: function() {
      return this.transform.position;
    },
    set: function(value) {
      this.transform.position.copyFrom(value);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "scale", {
    get: function() {
      return this.transform.scale;
    },
    set: function(value) {
      this.transform.scale.copyFrom(value);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "pivot", {
    get: function() {
      return this.transform.pivot;
    },
    set: function(value) {
      this.transform.pivot.copyFrom(value);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "skew", {
    get: function() {
      return this.transform.skew;
    },
    set: function(value) {
      this.transform.skew.copyFrom(value);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "rotation", {
    get: function() {
      return this.transform.rotation;
    },
    set: function(value) {
      this.transform.rotation = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "angle", {
    get: function() {
      return this.transform.rotation * RAD_TO_DEG;
    },
    set: function(value) {
      this.transform.rotation = value * DEG_TO_RAD;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "zIndex", {
    get: function() {
      return this._zIndex;
    },
    set: function(value) {
      this._zIndex = value;
      if (this.parent) {
        this.parent.sortDirty = true;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "worldVisible", {
    get: function() {
      var item = this;
      do {
        if (!item.visible) {
          return false;
        }
        item = item.parent;
      } while (item);
      return true;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DisplayObject2.prototype, "mask", {
    get: function() {
      return this._mask;
    },
    set: function(value) {
      if (this._mask === value) {
        return;
      }
      if (this._mask) {
        var maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;
        if (maskObject) {
          maskObject._maskRefCount--;
          if (maskObject._maskRefCount === 0) {
            maskObject.renderable = true;
            maskObject.isMask = false;
          }
        }
      }
      this._mask = value;
      if (this._mask) {
        var maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;
        if (maskObject) {
          if (maskObject._maskRefCount === 0) {
            maskObject.renderable = false;
            maskObject.isMask = true;
          }
          maskObject._maskRefCount++;
        }
      }
    },
    enumerable: false,
    configurable: true
  });
  return DisplayObject2;
}(import_eventemitter3.default);
var TemporaryDisplayObject = function(_super) {
  __extends(TemporaryDisplayObject2, _super);
  function TemporaryDisplayObject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.sortDirty = null;
    return _this;
  }
  return TemporaryDisplayObject2;
}(DisplayObject);
DisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;
function sortChildren(a, b) {
  if (a.zIndex === b.zIndex) {
    return a._lastSortedIndex - b._lastSortedIndex;
  }
  return a.zIndex - b.zIndex;
}
var Container = function(_super) {
  __extends(Container2, _super);
  function Container2() {
    var _this = _super.call(this) || this;
    _this.children = [];
    _this.sortableChildren = settings.SORTABLE_CHILDREN;
    _this.sortDirty = false;
    return _this;
  }
  Container2.prototype.onChildrenChange = function(_length) {
  };
  Container2.prototype.addChild = function() {
    var arguments$1 = arguments;
    var children = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      children[_i] = arguments$1[_i];
    }
    if (children.length > 1) {
      for (var i = 0; i < children.length; i++) {
        this.addChild(children[i]);
      }
    } else {
      var child = children[0];
      if (child.parent) {
        child.parent.removeChild(child);
      }
      child.parent = this;
      this.sortDirty = true;
      child.transform._parentID = -1;
      this.children.push(child);
      this._boundsID++;
      this.onChildrenChange(this.children.length - 1);
      this.emit("childAdded", child, this, this.children.length - 1);
      child.emit("added", this);
    }
    return children[0];
  };
  Container2.prototype.addChildAt = function(child, index) {
    if (index < 0 || index > this.children.length) {
      throw new Error(child + "addChildAt: The index " + index + " supplied is out of bounds " + this.children.length);
    }
    if (child.parent) {
      child.parent.removeChild(child);
    }
    child.parent = this;
    this.sortDirty = true;
    child.transform._parentID = -1;
    this.children.splice(index, 0, child);
    this._boundsID++;
    this.onChildrenChange(index);
    child.emit("added", this);
    this.emit("childAdded", child, this, index);
    return child;
  };
  Container2.prototype.swapChildren = function(child, child2) {
    if (child === child2) {
      return;
    }
    var index1 = this.getChildIndex(child);
    var index2 = this.getChildIndex(child2);
    this.children[index1] = child2;
    this.children[index2] = child;
    this.onChildrenChange(index1 < index2 ? index1 : index2);
  };
  Container2.prototype.getChildIndex = function(child) {
    var index = this.children.indexOf(child);
    if (index === -1) {
      throw new Error("The supplied DisplayObject must be a child of the caller");
    }
    return index;
  };
  Container2.prototype.setChildIndex = function(child, index) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("The index " + index + " supplied is out of bounds " + this.children.length);
    }
    var currentIndex = this.getChildIndex(child);
    removeItems(this.children, currentIndex, 1);
    this.children.splice(index, 0, child);
    this.onChildrenChange(index);
  };
  Container2.prototype.getChildAt = function(index) {
    if (index < 0 || index >= this.children.length) {
      throw new Error("getChildAt: Index (" + index + ") does not exist.");
    }
    return this.children[index];
  };
  Container2.prototype.removeChild = function() {
    var arguments$1 = arguments;
    var children = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      children[_i] = arguments$1[_i];
    }
    if (children.length > 1) {
      for (var i = 0; i < children.length; i++) {
        this.removeChild(children[i]);
      }
    } else {
      var child = children[0];
      var index = this.children.indexOf(child);
      if (index === -1) {
        return null;
      }
      child.parent = null;
      child.transform._parentID = -1;
      removeItems(this.children, index, 1);
      this._boundsID++;
      this.onChildrenChange(index);
      child.emit("removed", this);
      this.emit("childRemoved", child, this, index);
    }
    return children[0];
  };
  Container2.prototype.removeChildAt = function(index) {
    var child = this.getChildAt(index);
    child.parent = null;
    child.transform._parentID = -1;
    removeItems(this.children, index, 1);
    this._boundsID++;
    this.onChildrenChange(index);
    child.emit("removed", this);
    this.emit("childRemoved", child, this, index);
    return child;
  };
  Container2.prototype.removeChildren = function(beginIndex, endIndex) {
    if (beginIndex === void 0) {
      beginIndex = 0;
    }
    if (endIndex === void 0) {
      endIndex = this.children.length;
    }
    var begin = beginIndex;
    var end = endIndex;
    var range = end - begin;
    var removed;
    if (range > 0 && range <= end) {
      removed = this.children.splice(begin, range);
      for (var i = 0; i < removed.length; ++i) {
        removed[i].parent = null;
        if (removed[i].transform) {
          removed[i].transform._parentID = -1;
        }
      }
      this._boundsID++;
      this.onChildrenChange(beginIndex);
      for (var i = 0; i < removed.length; ++i) {
        removed[i].emit("removed", this);
        this.emit("childRemoved", removed[i], this, i);
      }
      return removed;
    } else if (range === 0 && this.children.length === 0) {
      return [];
    }
    throw new RangeError("removeChildren: numeric values are outside the acceptable range.");
  };
  Container2.prototype.sortChildren = function() {
    var sortRequired = false;
    for (var i = 0, j = this.children.length; i < j; ++i) {
      var child = this.children[i];
      child._lastSortedIndex = i;
      if (!sortRequired && child.zIndex !== 0) {
        sortRequired = true;
      }
    }
    if (sortRequired && this.children.length > 1) {
      this.children.sort(sortChildren);
    }
    this.sortDirty = false;
  };
  Container2.prototype.updateTransform = function() {
    if (this.sortableChildren && this.sortDirty) {
      this.sortChildren();
    }
    this._boundsID++;
    this.transform.updateTransform(this.parent.transform);
    this.worldAlpha = this.alpha * this.parent.worldAlpha;
    for (var i = 0, j = this.children.length; i < j; ++i) {
      var child = this.children[i];
      if (child.visible) {
        child.updateTransform();
      }
    }
  };
  Container2.prototype.calculateBounds = function() {
    this._bounds.clear();
    this._calculateBounds();
    for (var i = 0; i < this.children.length; i++) {
      var child = this.children[i];
      if (!child.visible || !child.renderable) {
        continue;
      }
      child.calculateBounds();
      if (child._mask) {
        var maskObject = child._mask.isMaskData ? child._mask.maskObject : child._mask;
        if (maskObject) {
          maskObject.calculateBounds();
          this._bounds.addBoundsMask(child._bounds, maskObject._bounds);
        } else {
          this._bounds.addBounds(child._bounds);
        }
      } else if (child.filterArea) {
        this._bounds.addBoundsArea(child._bounds, child.filterArea);
      } else {
        this._bounds.addBounds(child._bounds);
      }
    }
    this._bounds.updateID = this._boundsID;
  };
  Container2.prototype.getLocalBounds = function(rect, skipChildrenUpdate) {
    if (skipChildrenUpdate === void 0) {
      skipChildrenUpdate = false;
    }
    var result = _super.prototype.getLocalBounds.call(this, rect);
    if (!skipChildrenUpdate) {
      for (var i = 0, j = this.children.length; i < j; ++i) {
        var child = this.children[i];
        if (child.visible) {
          child.updateTransform();
        }
      }
    }
    return result;
  };
  Container2.prototype._calculateBounds = function() {
  };
  Container2.prototype._renderWithCulling = function(renderer) {
    var sourceFrame = renderer.renderTexture.sourceFrame;
    if (!(sourceFrame.width > 0 && sourceFrame.height > 0)) {
      return;
    }
    var bounds;
    var transform;
    if (this.cullArea) {
      bounds = this.cullArea;
      transform = this.worldTransform;
    } else if (this._render !== Container2.prototype._render) {
      bounds = this.getBounds(true);
    }
    if (bounds && sourceFrame.intersects(bounds, transform)) {
      this._render(renderer);
    } else if (this.cullArea) {
      return;
    }
    for (var i = 0, j = this.children.length; i < j; ++i) {
      var child = this.children[i];
      var childCullable = child.cullable;
      child.cullable = childCullable || !this.cullArea;
      child.render(renderer);
      child.cullable = childCullable;
    }
  };
  Container2.prototype.render = function(renderer) {
    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
      return;
    }
    if (this._mask || this.filters && this.filters.length) {
      this.renderAdvanced(renderer);
    } else if (this.cullable) {
      this._renderWithCulling(renderer);
    } else {
      this._render(renderer);
      for (var i = 0, j = this.children.length; i < j; ++i) {
        this.children[i].render(renderer);
      }
    }
  };
  Container2.prototype.renderAdvanced = function(renderer) {
    var filters = this.filters;
    var mask = this._mask;
    if (filters) {
      if (!this._enabledFilters) {
        this._enabledFilters = [];
      }
      this._enabledFilters.length = 0;
      for (var i = 0; i < filters.length; i++) {
        if (filters[i].enabled) {
          this._enabledFilters.push(filters[i]);
        }
      }
    }
    var flush = filters && this._enabledFilters && this._enabledFilters.length || mask && (!mask.isMaskData || mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE));
    if (flush) {
      renderer.batch.flush();
    }
    if (filters && this._enabledFilters && this._enabledFilters.length) {
      renderer.filter.push(this, this._enabledFilters);
    }
    if (mask) {
      renderer.mask.push(this, this._mask);
    }
    if (this.cullable) {
      this._renderWithCulling(renderer);
    } else {
      this._render(renderer);
      for (var i = 0, j = this.children.length; i < j; ++i) {
        this.children[i].render(renderer);
      }
    }
    if (flush) {
      renderer.batch.flush();
    }
    if (mask) {
      renderer.mask.pop(this);
    }
    if (filters && this._enabledFilters && this._enabledFilters.length) {
      renderer.filter.pop();
    }
  };
  Container2.prototype._render = function(_renderer) {
  };
  Container2.prototype.destroy = function(options) {
    _super.prototype.destroy.call(this);
    this.sortDirty = false;
    var destroyChildren = typeof options === "boolean" ? options : options && options.children;
    var oldChildren = this.removeChildren(0, this.children.length);
    if (destroyChildren) {
      for (var i = 0; i < oldChildren.length; ++i) {
        oldChildren[i].destroy(options);
      }
    }
  };
  Object.defineProperty(Container2.prototype, "width", {
    get: function() {
      return this.scale.x * this.getLocalBounds().width;
    },
    set: function(value) {
      var width = this.getLocalBounds().width;
      if (width !== 0) {
        this.scale.x = value / width;
      } else {
        this.scale.x = 1;
      }
      this._width = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Container2.prototype, "height", {
    get: function() {
      return this.scale.y * this.getLocalBounds().height;
    },
    set: function(value) {
      var height = this.getLocalBounds().height;
      if (height !== 0) {
        this.scale.y = value / height;
      } else {
        this.scale.y = 1;
      }
      this._height = value;
    },
    enumerable: false,
    configurable: true
  });
  return Container2;
}(DisplayObject);
Container.prototype.containerUpdateTransform = Container.prototype.updateTransform;

export {
  DisplayObject,
  TemporaryDisplayObject,
  Container
};
/*!
 * @pixi/display - v6.5.10
 * Compiled Thu, 06 Jul 2023 15:25:11 UTC
 *
 * @pixi/display is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=chunk-6HJLR3NZ.js.map
